{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [] //ici items répresente la liste (Array) de Panier =\n  },\n\n  reducers: {\n    addItemToCart: (state, action) => {\n      const item = action.payload;\n      console.log(state.items);\n      console.log(\"item_id = \" + item.id);\n      console.log(state.items);\n      const exist = state.items.find(cartItem => cartItem.id === item.id); //La méthode find() renvoie la valeur du premier élément trouvé dans le tableau qui respecte la condition donnée par la fonction de test passée en argument\n      //ici, (exist) = (product) = (item) = (cartItem).\n      console.log(\"_id = \" + exist.id);\n      if (exist) {\n        return {\n          ...state,\n          items: state.items.map(cartItem => {\n            if (cartItem.id === exist.id) {\n              return {\n                ...cartItem,\n                quantity: cartItem.quantity + 1 //Le 1 d'incrementation avec la flèche ( > ) dans (< 1 >)\n              };\n            }\n\n            return cartItem;\n          })\n        };\n      }\n      return {\n        ...state,\n        items: [...state.items, {\n          ...item,\n          quantity: 1\n        }] //Le 1 de montrer comme quoi on a 1 article de cet article au Panier.\n        //Si on me ( 0 ), on voit pas (le nombre d'articles ajoutés) change quand on clic sur [Add to cart]\n        //Si on met ( 2 ), il nous ajoute 2 articles à chaque clic sur [Add to cart].\n      };\n    },\n\n    removeItemFromCart: (state, action) => {\n      const item = action.payload;\n      const exist = state.items.find(cartItem => cartItem.id === item.id);\n      if (exist.quantity === 1) {\n        return {\n          ...state,\n          items: state.items.filter(cartItem => cartItem.id !== item.id)\n        };\n      }\n      return {\n        ...state,\n        items: state.items.map(cartItem => {\n          if (cartItem.id === exist.id) {\n            return {\n              ...cartItem,\n              quantity: cartItem.quantity - 1 //Le -1 de décrementation avec la flèche ( < ) dans (< 1 >)\n            };\n          }\n\n          return cartItem;\n        })\n      };\n    },\n    clearCartItem: (state, action) => {\n      return {\n        ...state,\n        items: state.items.filter(cartItem => cartItem.id !== action.payload.id)\n      };\n    },\n    clearCart: state => {\n      return {\n        ...state,\n        items: []\n      };\n    },\n    setCartItems: (state, action) => {\n      //Pour ajouter les articles au Panier à chaque fois on clic sur [Add to cart].\n      return {\n        ...state,\n        items: action.payload\n      };\n    }\n  }\n});\nexport const CART_SLICE_ACTIONS = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","reducers","addItemToCart","state","action","item","payload","console","log","id","exist","find","cartItem","map","quantity","removeItemFromCart","filter","clearCartItem","clearCart","setCartItems","CART_SLICE_ACTIONS","actions","reducer"],"sources":["/Users/ivan.jirjees/Desktop/7eme-Arche-frontEnd/src/redux/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [], //ici items répresente la liste (Array) de Panier =\n  },\n  reducers: {\n    addItemToCart: (state, action) => {\n      const item = action.payload;\n      console.log(state.items);\n      console.log(\"item_id = \" + item.id);\n      console.log(state.items);\n      const exist = state.items.find(cartItem => cartItem.id === item.id); //La méthode find() renvoie la valeur du premier élément trouvé dans le tableau qui respecte la condition donnée par la fonction de test passée en argument\n      //ici, (exist) = (product) = (item) = (cartItem).\n      console.log(\"_id = \" + exist.id);\n      if (exist) {\n        return {\n          ...state,\n          items: state.items.map(cartItem => {\n            if (cartItem.id === exist.id) {\n              return {\n                ...cartItem,\n                quantity: cartItem.quantity + 1 //Le 1 d'incrementation avec la flèche ( > ) dans (< 1 >)\n              }\n            }\n            return cartItem;\n          })\n        }\n      }\n      return {\n        ...state,\n        items: [...state.items, { ...item, quantity: 1 }] //Le 1 de montrer comme quoi on a 1 article de cet article au Panier.\n                                                          //Si on me ( 0 ), on voit pas (le nombre d'articles ajoutés) change quand on clic sur [Add to cart]\n                                                          //Si on met ( 2 ), il nous ajoute 2 articles à chaque clic sur [Add to cart].\n      }\n    },\n    removeItemFromCart: (state, action) => {\n      const item = action.payload;\n      const exist = state.items.find(cartItem => cartItem.id === item.id);\n      if (exist.quantity === 1) {\n        return {\n          ...state,\n          items: state.items.filter(cartItem => cartItem.id !== item.id)\n        }\n      }\n      return {\n        ...state,\n        items: state.items.map(cartItem => {\n          if (cartItem.id === exist.id) {\n            return {\n              ...cartItem,\n              quantity: cartItem.quantity - 1 //Le -1 de décrementation avec la flèche ( < ) dans (< 1 >)\n            }\n          }\n          return cartItem;\n        })\n      }\n    },\n    clearCartItem: (state, action) => {\n      return {\n        ...state,\n        items: state.items.filter(cartItem => cartItem.id !== action.payload.id)\n      }\n    },\n    clearCart: (state) => {\n      return {\n        ...state,\n        items: []\n      }\n    },\n    setCartItems: (state, action) => {  //Pour ajouter les articles au Panier à chaque fois on clic sur [Add to cart].\n      return {\n        ...state,\n        items: action.payload\n      }\n    }\n  }\n});\n\n\nexport const CART_SLICE_ACTIONS = cartSlice.actions;\n\nexport default cartSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}